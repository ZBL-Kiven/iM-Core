apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion compile_sdk_version as int
    defaultConfig {
        minSdkVersion min_sdk_version as int
        targetSdkVersion target_sdk_version as int
        applicationId "com.zj.imcore"
        flavorDimensions("none")
    }

    signingConfigs {
        release {

        }
    }

    File propFile = file('signing.properties')
    if (propFile.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props.containsKey('RELEASE_STOREFILE') && props.containsKey('RELEASE_KEY_ALIAS') && props.containsKey('RELEASE_KEY_PASSWORD') && props.containsKey('RELEASE_STOREPASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['RELEASE_STOREFILE'])
            android.signingConfigs.release.storePassword = props['RELEASE_STOREPASSWORD']
            android.signingConfigs.release.keyAlias = props['RELEASE_KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['RELEASE_KEY_PASSWORD']
        } else {
            android.buildTypes.release.signingConfig = null
        }
    } else {
        android.buildTypes.release.signingConfig = null
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name != "debug") {
            variant.outputs.all {
                def time = new Date().format("MMddHHmm")
                outputFileName = "${variant.productFlavors[0].name.toUpperCase()}_" +
                        "${variant.buildType.name.toUpperCase()}_v${variant.versionName}_${time}.apk"
            }
            variant.getAssembleProvider().get().doLast { assemble ->
                copy {
                    from variant.outputs*.outputFile
                    into "apks"
                }
                delete variant.outputs*.outputFile
            }
        }
    }

    def uatConfig = [
            ENV_APP_ID  : "8b61e232-cc7c-47ac-abf1-29249b36b0f8",
            ENV_PROTOCOL: "http",
            ENV_HOST    : "fc-api.i-mocca.com:8000"
    ]

    def releaseConfig = [
            ENV_APP_ID  : "8b61e232-cc7c-47ac-abf1-29249b36b0f8",
            ENV_PROTOCOL: "http",
            ENV_HOST    : "fc-api.i-mocca.com:8000"
    ]

    productFlavors {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('version.properties').newDataInputStream())

        uat {
            applicationIdSuffix = ".uat"
            manifestPlaceholders = uatConfig
            versionCode = properties.getProperty("VERSION_CODE_UAT").toInteger()
            versionName = properties.getProperty("VERSION_NAME_UAT")
            dimension = 'none'
        }

        prod {
            manifestPlaceholders = releaseConfig
            versionCode = properties.getProperty("VERSION_CODE_RELEASE").toInteger()
            versionName = properties.getProperty("VERSION_NAME_RELEASE")
            dimension = 'none'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':im-base')
    implementation(name: 'AndroidEmoji-1.0.0', ext: 'aar')
    implementation 'com.google.android.material:material:1.2.0-alpha05'
    implementation 'org.java-websocket:Java-WebSocket:1.4.0'
    implementation 'junit:junit:4.12'
    implementation "com.cf.core:album:2.0.2"
}
